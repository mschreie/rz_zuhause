- name: get current content views
  shell: hammer content-view list --organization "{{ organization }}" --nondefault yes | awk '{print $3}'
  register: current_content_views
  changed_when: false

- name: create content view
  command: 'hammer content-view create --organization "{{ organization }}" --name "{{ item.content_view }}"'
  when: item.content_view not in current_content_views.stdout_lines
  with_items: "{{ content_config }}"

- name: add repos to content_view
  command: 'hammer content-view add-repository --organization "{{ organization }}" --name "{{ item.0.content_view }}" --product "{{ item.1.product }}" --repository "{{ item.1.repository }}"'
  when: (republish is defined and republish) or item.0.content_view not in current_content_views.stdout_lines
  with_subelements:
    - "{{ content_config }}"
    - content

- name: get current lifecycle environments
  shell: hammer lifecycle-environment list --organization "{{ organization }}" --library false | awk '{ print $3 }' | tail -n+4
  register: current_lifecycle_environments
  changed_when: false

- name: publish content_view
  command: 'hammer content-view publish --organization "{{ organization }}" --name "{{ item.content_view }}"'
  when: (republish is defined and republish) or item.content_view not in current_content_views.stdout_lines
  with_items: "{{ content_config }}"

- name: get latest version id of content_view
  shell: hammer content-view version list --organization "{{ organization }}" --content-view "{{ item.content_view }}" | grep Library
  register: cv_id
  changed_when: false
  with_items: "{{ content_config }}"

- name: promote latest version of content_view to all lifecycle environments
  command: hammer content-view version promote --id '{{ item.1.stdout.split(' ')[0] }}' --organization "{{ organization }}" --to-lifecycle-environment '{{ item.0.name }}'
  when: (republish is defined and republish) or item.0.name not in item.1.stdout
  with_nested:
    - "{{ lifecycle_environments }}"
    - "{{ cv_id.results }}"
