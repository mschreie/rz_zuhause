- name: add subnets to dhcpd.conf
  blockinfile:
    dest: /etc/dhcp/dhcpd.conf
    backup: true
    block: |
       subnet {{ item.ip }} netmask {{ item.netmask }} {
          pool
             {
               range {{ item.range }};
             }
             option subnet-mask {{ item.netmask }};
             option routers {{ item.gateway }};
       }
    marker: "# {mark} Ansible managed block {{ item.ip }}"
  notify: Restart dhcpd
  with_items:
    - "{{ networks }}"
  when: item.managed_by == 'ansible' 

- name: get subnets from dhcp unit file
  shell: "grep -q {{ item.interface }} /etc/systemd/system/dhcpd.service"
  register: unit_file 
  with_items:
    - "{{ networks }}"
  ignore_errors: true

- name: add subnet to dhcp unit file 
  lineinfile:
     dest: /etc/systemd/system/dhcpd.service
     regexp: '^(ExecStart=/usr/sbin/dhcpd .*)$'
     line: '\1 {{ item.item.interface }}'
     backrefs: true
  when: item.rc == 1
  with_items:
    - "{{ unit_file.results }}"
  notify: 
    - systemctl daemon-reload
    - Restart dhcpd

- name: add reverse subnet to dns
  blockinfile:
    dest: /etc/zones.conf
    backup: true
    block: |
      zone "{{ item.reverse }}" {
          type master;
          file "/var/named/dynamic/db.{{ item.reverse }}";
          update-policy {
                  grant rndc-key zonesub ANY;
          };
      };
    marker: "# {mark} Ansible managed block {{ item.reverse }}"
  notify: Restart named
  with_items:
    - "{{ networks }}"
  when: item.managed_by == 'ansible' 


- name: add ilo staticaly to dhcp
  blockinfile:
    dest: /etc/dhcp/dhcpd.hosts
    backup: true
    block: |
      host {{ hostvars[item]['ilo_name'] }} {
                    fixed-address {{ hostvars[item]['ilo_ip'] }};
                  }
    marker: "# {mark} Ansible managed block {{ hostvars[item]['ilo_name'] }}"
                    ## hardware ethernet {{ hostvars[item]['ilo_mac'] }};
  notify: Restart dhcpd
  with_items: 
     - "{{ groups['servers'] }}"
##  when: hostvars[item]['ilo_mac'] is defined

- name: flush handlers
  meta: 
    flush_handlers

- name: check dns
  shell: host {{ hostname }} {
  register: dnsout
  ignore_errors: yes
  with_items: 
     - "{{ groups['servers'] }}"
  ##when: hostvars[item]['ilo_mac'] is defined

- name: add ilo staticaly to dns
  script: binary/named_update.sh {{ fqdn }}  {{ ipaddress }} {{ reverse }}  
  # debug:
  #   msg:  |
  #     fqdn: {{ fqdn }}
  #     ipaddress: {{ ipaddress }} 
  #     reverse: {{ reverse }}  
  vars:
    fqdn: "{{ hostvars[item.item]['ilo_name'] }}.{{ dns_domain }}."
    ipaddress: "{{ hostvars[item.item]['ilo_ip'] }}"
    reverse: "{{ hostvars[item.item]['ilo_reverse'] }}"
  notify: Restart named
  with_items: 
     - "{{ dnsout.results }}" 
  when: item.stdout.find('{{ hostvars[item.item]['ilo_ip'] }}') == -1
  ## when: item.stdout.find('{{ ipaddress }}') == -1
  run_once: true

- name: flush handlers
  meta: 
    flush_handlers
